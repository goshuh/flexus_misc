#!/usr/bin/python3

import os
import sys

import re
import subprocess


def parse(dir, dic, fn):
    print(fn, file = sys.stderr)

    l = 0

    for dn in fn.split('/'):
        sp = dn.split('_')

        if len(sp) == 4:
            l = int(sp[2])
            n = int(sp[3])
            break

    if not l:
        l = 0
        n = 0

    lds = dic.setdefault(l, {})
    nds = lds.setdefault(n, {})

    res = subprocess.check_output([
        f'{dir}/../bin/stat',
        '-d', fn,
        'print', '.*'], text = True)

    for cs in res.split('\n'):
        sp  = cs.split()
        val = None

        if len(sp) != 2:
            continue

        nds[sp[0]] = sp[1]


def traverse(dir):
    sub = list(map(re.compile, dir.split(os.sep)))

    def iterate(top, dep):
        end = dep == len(sub) - 1

        for f in os.listdir(top):
            if sub[dep].match(f):
                cur = os.path.join(top, f)

                if end:
                    yield cur
                elif os.path.isdir(cur):
                    yield from iterate(cur, dep + 1)

    yield from iterate('.', 0)


def trans(dic):
    ret = {}

    def total(*arr):
        return sum(map(lambda x: int(dic[x]), arr))

    l1i_hit = total('sys-ufetch-Hits')
    l1i_acc = total('sys-ufetch-FetchAccess')

    l1d_hit = total('sys-L1d-Hits')
    l1d_acc = total('sys-L1d-Accesses')

    l2i_hit = total('sys-L2-FetchHit')
    l2i_acc = total('sys-L2-FetchMissMemory',
                    'sys-L2-FetchMissPeer') + l2i_hit

    l2d_hit = total('sys-L2-ReadHit',
                    'sys-L2-WriteHit')
    l2d_acc = total('sys-L2-ReadMissMemory',
                    'sys-L2-ReadMissPeer',
                    'sys-L2-WriteMissInvalidatesAndData',
                    'sys-L2-WriteMissInvalidatesOnly',
                    'sys-L2-WriteMissMemory') + l2d_hit

    vlb_hit = total('sys-mmu-dtlb-hit')
    vlb_acc = total('sys-mmu-dtlb-access')

    ret['l1i-miss'] = 1.0 - l1i_hit / l1i_acc
    ret['l1d-miss'] = 1.0 - l1d_hit / l1d_acc
    ret['l2i-miss'] = 1.0 - l2i_hit / l2i_acc
    ret['l2d-miss'] = 1.0 - l2d_hit / l2d_acc
    ret['vlb-miss'] = 1.0 - vlb_hit / vlb_acc

    return ret


if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.exit(f'usage: {sys.argv[0]} <dir> [pat...]')

    dic = {}
    dir = os.path.dirname(sys.argv[0])

    for fn in traverse(sys.argv[1]):
        parse(dir, dic, fn)

    out = []

    for l, lds in dic.items():
        for n, nds in lds.items():
            for k, v in trans(nds).items():
                out.append((k, n, l, v))

    for o in sorted(out):
        print(','.join(map(str, o)))
